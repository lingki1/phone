'use client';

import React, { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';
import NotificationContainer from './NotificationContainer';
import { NotificationItem } from './types';

interface NotificationContextType {
  addNotification: (notification: Omit<NotificationItem, 'id' | 'timestamp'>) => void;
  removeNotification: (id: string) => void;
  clearAllNotifications: () => void;
}

const NotificationContext = createContext<NotificationContextType | undefined>(undefined);

interface NotificationProviderProps {
  children: ReactNode;
}

export function NotificationProvider({ children }: NotificationProviderProps) {
  // ‰øÆÊîπ‰∏∫Âçï‰∏ÄÈÄöÁü•Áä∂ÊÄÅÔºåËÄå‰∏çÊòØÊï∞ÁªÑ
  const [currentNotification, setCurrentNotification] = useState<NotificationItem | null>(null);

  // ÁßªÈô§ÈÄöÁü•
  const removeNotification = useCallback((id: string) => {
    setCurrentNotification(prev => prev?.id === id ? null : prev);
  }, []);

  // Ê∑ªÂä†ÈÄöÁü•
  const addNotification = useCallback((notification: Omit<NotificationItem, 'id' | 'timestamp'>) => {
    const newNotification: NotificationItem = {
      ...notification,
      id: `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      timestamp: Date.now()
    };

    // Êñ∞ÈÄöÁü•Áõ¥Êé•Ë¶ÜÁõñÊóßÈÄöÁü•
    setCurrentNotification(newNotification);

    // Ëá™Âä®ÁßªÈô§ÈÄöÁü•ÔºàÂ¶ÇÊûúËÆæÁΩÆ‰∫ÜËá™Âä®ÁßªÈô§Ôºâ
    if (notification.autoRemove !== false) {
      setTimeout(() => {
        removeNotification(newNotification.id);
      }, notification.duration || 5000);
    }
  }, [removeNotification]);

  // Ê∏ÖÁ©∫ÊâÄÊúâÈÄöÁü•
  const clearAllNotifications = useCallback(() => {
    setCurrentNotification(null);
  }, []);

  // Ê£ÄÊü•ÊòØÂê¶Â∫îËØ•ÊäëÂà∂ÈÄöÁü•
  const shouldSuppressNotification = useCallback((chatId?: string) => {
    // Â¶ÇÊûúÂΩìÂâçÂú®ËÅäÂ§©È°µÈù¢Ôºå‰∏îÈÄöÁü•Êù•Ëá™Âêå‰∏Ä‰∏™ËÅäÂ§©ÔºåÂàôÊäëÂà∂ÈÄöÁü•
    if (typeof window !== 'undefined' && window.currentActiveChatId && chatId) {
      return window.currentActiveChatId === chatId;
    }
    return false;
  }, []);

  // ÁõëÂê¨ÂÖ®Â±Ä‰∫ã‰ª∂
  useEffect(() => {
    // ÁõëÂê¨AIÂä®ÊÄÅÁîüÊàê‰∫ã‰ª∂
    const handleAiPostGenerated = (event: Event) => {
      const customEvent = event as CustomEvent;
      const { post } = customEvent.detail;
      
      addNotification({
        type: 'success',
        title: 'Êñ∞Âä®ÊÄÅÁîüÊàê',
        message: `${post.authorName} ÂèëÂ∏É‰∫ÜÊñ∞Âä®ÊÄÅ`,
        icon: 'üìù',
        action: {
          label: 'Êü•Áúã',
          onClick: () => {
            // Ë∑≥ËΩ¨Âà∞Âä®ÊÄÅÈ°µÈù¢
            window.dispatchEvent(new CustomEvent('navigateToMoments'));
          }
        }
      });
    };

    // ÁõëÂê¨AIËØÑËÆ∫ÁîüÊàê‰∫ã‰ª∂
    const handleAiCommentsGenerated = () => {
      addNotification({
        type: 'info',
        title: 'Êñ∞ËØÑËÆ∫ÁîüÊàê',
        message: 'AIËßíËâ≤ÂØπÂä®ÊÄÅÂèëË°®‰∫ÜËØÑËÆ∫',
        icon: 'üí¨',
        action: {
          label: 'Êü•Áúã',
          onClick: () => {
            // Ë∑≥ËΩ¨Âà∞Âä®ÊÄÅÈ°µÈù¢
            window.dispatchEvent(new CustomEvent('navigateToMoments'));
          }
        }
      });
    };

    // ÁõëÂê¨ËÅäÂ§©Ê∂àÊÅØÁîüÊàê‰∫ã‰ª∂ - Ê∑ªÂä†ËÅäÂ§©È°µÈù¢Ê£ÄÊµã
    const handleChatMessageGenerated = (event: Event) => {
      const customEvent = event as CustomEvent;
      const { characterName, chatId, messageContent } = customEvent.detail;
      
      // Â¶ÇÊûúÂΩìÂâçÂú®ÂØπÂ∫îÁöÑËÅäÂ§©È°µÈù¢Ôºå‰∏çÊòæÁ§∫ÈÄöÁü•
      if (shouldSuppressNotification(chatId)) {
        return;
      }
      
      addNotification({
        type: 'info',
        title: 'Êñ∞Ê∂àÊÅØ',
        message: `${characterName}: ${messageContent?.substring(0, 30) || 'ÂèëÈÄÅ‰∫ÜÊñ∞Ê∂àÊÅØ'}${messageContent && messageContent.length > 30 ? '...' : ''}`,
        icon: 'üíå',
        action: {
          label: 'Êü•Áúã',
          onClick: () => {
            // Ë∑≥ËΩ¨Âà∞ÁâπÂÆöËÅäÂ§©
            window.dispatchEvent(new CustomEvent('openChat', { 
              detail: { chatId } 
            }));
          }
        }
      });
    };

    // ÁõëÂê¨ÈîôËØØ‰∫ã‰ª∂
    const handleError = (event: Event) => {
      const customEvent = event as CustomEvent;
      const { error } = customEvent.detail;
      
      addNotification({
        type: 'error',
        title: 'Êìç‰ΩúÂ§±Ë¥•',
        message: error.message || 'ÂèëÁîüÊú™Áü•ÈîôËØØ',
        icon: '‚ùå',
        duration: 8000, // ÈîôËØØÈÄöÁü•ÊòæÁ§∫Êõ¥ÈïøÊó∂Èó¥
        action: {
          label: 'ÈáçËØï',
          onClick: () => {
            // ÂèØ‰ª•Ëß¶ÂèëÈáçËØïÈÄªËæë
            console.log('Retry action triggered');
          }
        }
      });
    };

    // Ê∑ªÂä†‰∫ã‰ª∂ÁõëÂê¨Âô®
    window.addEventListener('aiPostGenerated', handleAiPostGenerated);
    window.addEventListener('aiCommentsGenerated', handleAiCommentsGenerated);
    window.addEventListener('chatMessageGenerated', handleChatMessageGenerated);
    window.addEventListener('notificationError', handleError);

    // Ê∏ÖÁêÜÂáΩÊï∞
    return () => {
      window.removeEventListener('aiPostGenerated', handleAiPostGenerated);
      window.removeEventListener('aiCommentsGenerated', handleAiCommentsGenerated);
      window.removeEventListener('chatMessageGenerated', handleChatMessageGenerated);
      window.removeEventListener('notificationError', handleError);
    };
  }, [addNotification, shouldSuppressNotification]);

  const contextValue: NotificationContextType = {
    addNotification,
    removeNotification,
    clearAllNotifications
  };

  return (
    <NotificationContext.Provider value={contextValue}>
      {children}
      <NotificationContainer 
        notification={currentNotification}
        onRemove={removeNotification}
      />
    </NotificationContext.Provider>
  );
}

// Hook for using notifications
export function useNotifications() {
  const context = useContext(NotificationContext);
  if (context === undefined) {
    throw new Error('useNotifications must be used within a NotificationProvider');
  }
  return context;
} 