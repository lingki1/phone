'use client';

import React, { useState, useEffect } from 'react';
import { dataManager } from '../../utils/dataManager';
import { DiscoverPost, DiscoverSettings, DiscoverComment } from '../../types/discover';
import { ChatItem } from '../../types/chat';
import { aiCommentService } from './utils/aiCommentService';
import BottomNavigation from '../qq/BottomNavigation';

import PostComposer from './PostComposer';
import PostList from './PostList';
import DiscoverHeader from './DiscoverHeader';
import DiscoverSettingsPanel from './DiscoverSettingsPanel';
import './DiscoverPage.css';

export default function DiscoverPage() {
  const [posts, setPosts] = useState<DiscoverPost[]>([]);
  const [settings, setSettings] = useState<DiscoverSettings | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [showComposer, setShowComposer] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [userInfo, setUserInfo] = useState<{
    nickname: string;
    avatar: string;
  } | null>(null);

  // Êñ∞ÂÜÖÂÆπËÆ°Êï∞Áä∂ÊÄÅ
  const [newContentCount, setNewContentCount] = useState<{
    moments?: number;
    messages?: number;
  }>({});

  // Âä†ËΩΩÊñ∞ÂÜÖÂÆπËÆ°Êï∞
  useEffect(() => {
    const loadNewContentCount = async () => {
      try {
        const { newPostsCount, newCommentsCount } = await dataManager.calculateNewContentCount('user');
        setNewContentCount({
          moments: newPostsCount + newCommentsCount
        });
      } catch (error) {
        console.warn('Failed to load new content count:', error);
      }
    };

    loadNewContentCount();
  }, []);

  // ÁõëÂê¨Êñ∞ÂÜÖÂÆπÊõ¥Êñ∞‰∫ã‰ª∂
  useEffect(() => {
    const handleNewContentUpdate = async () => {
      try {
        const { newPostsCount, newCommentsCount } = await dataManager.calculateNewContentCount('user');
        setNewContentCount(prev => ({
          ...prev,
          moments: newPostsCount + newCommentsCount
        }));
      } catch (error) {
        console.warn('Failed to update new content count:', error);
      }
    };

    window.addEventListener('aiPostGenerated', handleNewContentUpdate);
    window.addEventListener('aiCommentsGenerated', handleNewContentUpdate);
    window.addEventListener('viewStateUpdated', handleNewContentUpdate);
    
    return () => {
      window.removeEventListener('aiPostGenerated', handleNewContentUpdate);
      window.removeEventListener('aiCommentsGenerated', handleNewContentUpdate);
      window.removeEventListener('viewStateUpdated', handleNewContentUpdate);
    };
  }, []);

  // Âä†ËΩΩÊï∞ÊçÆ
  useEffect(() => {
    const loadData = async () => {
      try {
        setIsLoading(true);
        
        // Âπ∂Ë°åÂä†ËΩΩÊï∞ÊçÆ
        const [postsData, settingsData, personalSettings] = await Promise.all([
          dataManager.getAllDiscoverPosts(),
          dataManager.getDiscoverSettings(),
          dataManager.getPersonalSettings()
        ]);

        // ‰∏∫ÊØè‰∏™Âä®ÊÄÅÂä†ËΩΩËØÑËÆ∫Êï∞ÊçÆ
        const postsWithComments = await Promise.all(
          postsData.map(async (post) => {
            const comments = await dataManager.getDiscoverCommentsByPost(post.id);
            return {
              ...post,
              comments: comments
            };
          })
        );

        setPosts(postsWithComments);
        setSettings(settingsData);
        setUserInfo({
          nickname: personalSettings.userNickname,
          avatar: personalSettings.userAvatar
        });


      } catch (error) {
        console.error('Failed to load discover data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadData();
  }, []);

  // ÁõëÂê¨AIËØÑËÆ∫ÁîüÊàêÂÆåÊàê‰∫ã‰ª∂
  useEffect(() => {
    const handleAiCommentsGenerated = async (event: Event) => {
      const customEvent = event as CustomEvent;
      const { postId } = customEvent.detail;
      
      try {
        // ÈáçÊñ∞Âä†ËΩΩËØ•Âä®ÊÄÅÁöÑËØÑËÆ∫
        const updatedComments = await dataManager.getDiscoverCommentsByPost(postId);
        
        // Êõ¥Êñ∞Êú¨Âú∞Áä∂ÊÄÅ
        setPosts(prev => prev.map(post => 
          post.id === postId 
            ? { ...post, comments: updatedComments }
            : post
        ));
        

        
        console.log(`Âä®ÊÄÅ ${postId} ÁöÑAIËØÑËÆ∫Â∑≤Êõ¥Êñ∞ÔºåÂÖ± ${updatedComments.length} Êù°ËØÑËÆ∫`);
      } catch (error) {
        console.error('Failed to update AI comments:', error);
      }
    };

          // ÁõëÂê¨AIÂä®ÊÄÅÁîüÊàêÂÆåÊàê‰∫ã‰ª∂
      const handleAiPostGenerated = async () => {
        try {
          // ÈáçÊñ∞Âä†ËΩΩÊâÄÊúâÂä®ÊÄÅ
          const postsData = await dataManager.getAllDiscoverPosts();
          const postsWithComments = await Promise.all(
            postsData.map(async (p) => {
              const postComments = await dataManager.getDiscoverCommentsByPost(p.id);
              return {
                ...p,
                comments: postComments
              };
            })
          );
          
          setPosts(postsWithComments);
          

          
          console.log('‚úÖ AIÂä®ÊÄÅÁîüÊàêÂÆåÊàêÔºåÂ∑≤Êõ¥Êñ∞Âä®ÊÄÅÂàóË°®');
        } catch (error) {
          console.error('Failed to update AI posts:', error);
        }
      };

    window.addEventListener('aiCommentsGenerated', handleAiCommentsGenerated);
    window.addEventListener('aiPostGenerated', handleAiPostGenerated);
    
    return () => {
      window.removeEventListener('aiCommentsGenerated', handleAiCommentsGenerated);
      window.removeEventListener('aiPostGenerated', handleAiPostGenerated);
    };
  }, []);

  // Áî®Êà∑ËøõÂÖ•Âä®ÊÄÅÈ°µÈù¢Êó∂Êõ¥Êñ∞Êü•ÁúãÁä∂ÊÄÅ
  useEffect(() => {
    const updateViewState = async () => {
      if (posts.length > 0) {
        const latestPost = posts[0]; // ÊúÄÊñ∞ÁöÑÂä®ÊÄÅ
        try {
          await dataManager.updateDiscoverViewState('user', latestPost.timestamp, latestPost.id);
          
          // Ëß¶ÂèëÊü•ÁúãÁä∂ÊÄÅÊõ¥Êñ∞‰∫ã‰ª∂
          window.dispatchEvent(new CustomEvent('viewStateUpdated'));
          
          console.log('‚úÖ Â∑≤Êõ¥Êñ∞Áî®Êà∑Êü•ÁúãÁä∂ÊÄÅÔºåÊó∂Èó¥Êà≥:', latestPost.timestamp);
        } catch (error) {
          console.warn('Failed to update view state:', error);
        }
      }
    };

    // Âª∂ËøüÊâßË°åÔºåÁ°Æ‰øùÈ°µÈù¢ÂÆåÂÖ®Âä†ËΩΩ
    const timer = setTimeout(updateViewState, 1000);
    return () => clearTimeout(timer);
  }, [posts]);

  // ÂèëÂ∏ÉÊñ∞Âä®ÊÄÅ
  const handlePublishPost = async (postData: {
    content: string;
    images: string[];
    isPublic: boolean;
    location?: string;
    mood?: string;
    tags: string[];
  }) => {
    if (!userInfo) return;

    try {
      const newPost: DiscoverPost = {
        id: Date.now().toString(),
        authorId: 'user',
        authorName: userInfo.nickname,
        authorAvatar: userInfo.avatar,
        content: postData.content,
        images: postData.images,
        timestamp: Date.now(),
        likes: [],
        comments: [],
        isPublic: postData.isPublic,
        location: postData.location,
        mood: postData.mood,
        tags: postData.tags,
        type: postData.images.length > 0 ? (postData.content ? 'mixed' : 'image') : 'text',
        aiGenerated: false
      };

      await dataManager.saveDiscoverPost(newPost);
      setPosts(prev => [newPost, ...prev]);
      setShowComposer(false);

      // Ëß¶ÂèëAIËßíËâ≤‰∫íÂä®
      triggerAiInteraction(newPost);
    } catch (error) {
      console.error('Failed to publish post:', error);
    }
  };

  // Ëß¶ÂèëAIËßíËâ≤‰∫íÂä®
  const triggerAiInteraction = async (post: DiscoverPost) => {
    try {
      // ‰ΩøÁî®Êñ∞ÁöÑAIËØÑËÆ∫ÊúçÂä°
      if (settings?.allowAiComments) {
        console.log('üöÄ ÂºÄÂßãÁîüÊàêAIËØÑËÆ∫ÔºåË∑≥ËøáAPIÈÖçÁΩÆÈ™åËØÅ');
        
        // Ëé∑ÂèñAIËßíËâ≤
        const chats = await dataManager.getAllChats();
        const aiCharacters = chats.filter(chat => !chat.isGroup);
        
        if (aiCharacters.length > 0) {
          // ÂêéÂè∞ÂºÇÊ≠•Â§ÑÁêÜAIËØÑËÆ∫ÁîüÊàê
          setTimeout(async () => {
            try {
              console.log(`üí¨ ‰∏∫Áî®Êà∑Âä®ÊÄÅÁîüÊàêAIËØÑËÆ∫`);
              await aiCommentService.generateCommentsForPost(post);
              
              // Ëß¶ÂèëËØÑËÆ∫Êõ¥Êñ∞‰∫ã‰ª∂
              window.dispatchEvent(new CustomEvent('aiCommentsGenerated', {
                detail: { postId: post.id }
              }));
            } catch (error) {
              console.error('ÂêéÂè∞AIËØÑËÆ∫ÁîüÊàêÂ§±Ë¥•:', error);
            }
          }, 2000); // Âª∂Ëøü2ÁßíÂºÄÂßãÁîüÊàê
        }
      }

      // ‰øùÁïôÂéüÊúâÁöÑÁÇπËµûÈÄªËæë
      if (settings?.allowAiLikes) {
        const chats = await dataManager.getAllChats();
        const aiCharacters = chats.filter(chat => !chat.isGroup);
        
        for (const character of aiCharacters) {
          if (Math.random() < 0.5) {
            await generateAiLike(post, character);
          }
        }
      }
    } catch (error) {
      console.error('Failed to trigger AI interaction:', error);
    }
  };



  // ÁîüÊàêAIÁÇπËµû
  const generateAiLike = async (post: DiscoverPost, character: ChatItem) => {
    try {
      const updatedPost = {
        ...post,
        likes: [...post.likes, character.id]
      };

      await dataManager.saveDiscoverPost(updatedPost);
      
      // Êõ¥Êñ∞Êú¨Âú∞Áä∂ÊÄÅ
      setPosts(prev => prev.map(p => 
        p.id === post.id ? updatedPost : p
      ));
    } catch (error) {
      console.error('Failed to generate AI like:', error);
    }
  };





  // Â§ÑÁêÜÁÇπËµû
  const handleLike = async (postId: string) => {
    try {
      const post = posts.find(p => p.id === postId);
      if (!post) return;

      const isLiked = post.likes.includes('user');
      const updatedLikes = isLiked 
        ? post.likes.filter(id => id !== 'user')
        : [...post.likes, 'user'];

      const updatedPost = { ...post, likes: updatedLikes };
      await dataManager.saveDiscoverPost(updatedPost);
      
      setPosts(prev => prev.map(p => 
        p.id === postId ? updatedPost : p
      ));
    } catch (error) {
      console.error('Failed to like post:', error);
    }
  };



  // Â§ÑÁêÜËØÑËÆ∫
  const handleComment = async (postId: string, content: string, replyTo?: string) => {
    if (!userInfo) return;

    try {
      const comment: DiscoverComment = {
        id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
        postId,
        authorId: 'user',
        authorName: userInfo.nickname,
        authorAvatar: userInfo.avatar,
        content,
        timestamp: Date.now(),
        likes: [],
        aiGenerated: false,
        replyTo: replyTo // Ê∑ªÂä†ÂõûÂ§çÁõÆÊ†á
      };

      await dataManager.saveDiscoverComment(comment);
      
      // Êõ¥Êñ∞Êú¨Âú∞Áä∂ÊÄÅÔºåÁ´ãÂç≥ÊòæÁ§∫Áî®Êà∑ËØÑËÆ∫
      setPosts(prev => prev.map(p => 
        p.id === postId 
          ? { ...p, comments: [...p.comments, comment] }
          : p
      ));

      // Ëß¶ÂèëAIËØÑËÆ∫ÁîüÊàê
      await triggerAiCommentForPost(postId);
    } catch (error) {
      console.error('Failed to add comment:', error);
    }
  };

  // Ëß¶ÂèëAIËØÑËÆ∫ÁîüÊàê
  const triggerAiCommentForPost = async (postId: string) => {
    try {
      // Ê£ÄÊü•ËÆæÁΩÆÊòØÂê¶ÂÖÅËÆ∏AIËØÑËÆ∫
      if (!settings?.allowAiComments) {
        console.log('AIËØÑËÆ∫ÂäüËÉΩÂ∑≤Á¶ÅÁî®');
        return;
      }

      // Ëé∑ÂèñÂΩìÂâçÂä®ÊÄÅ
      const currentPost = posts.find(p => p.id === postId);
      if (!currentPost) {
        console.error('Êú™ÊâæÂà∞Âä®ÊÄÅ:', postId);
        return;
      }

      console.log('üí¨ Áî®Êà∑ËØÑËÆ∫ÂêéËß¶ÂèëAIËØÑËÆ∫ÁîüÊàêÔºåÂä®ÊÄÅID:', postId);

      // ‰ΩøÁî®AIËØÑËÆ∫ÊúçÂä°ÁîüÊàêËØÑËÆ∫
      const result = await aiCommentService.generateCommentsForPost(currentPost);
      
      if (result.success) {
        console.log('‚úÖ AIËØÑËÆ∫ÁîüÊàêÊàêÂäüÔºåÂÖ±ÁîüÊàê', result.comments.length, 'Êù°ËØÑËÆ∫');
        
        // Ëß¶ÂèëËØÑËÆ∫Êõ¥Êñ∞‰∫ã‰ª∂ÔºåËÆ©UIËá™Âä®Âà∑Êñ∞
        window.dispatchEvent(new CustomEvent('aiCommentsGenerated', {
          detail: { postId: postId }
        }));
      } else {
        console.warn('‚ö†Ô∏è AIËØÑËÆ∫ÁîüÊàêÂ§±Ë¥•:', result.error);
      }
    } catch (error) {
      console.error('‚ùå Ëß¶ÂèëAIËØÑËÆ∫ÁîüÊàêÂ§±Ë¥•:', error);
    }
  };

  // Â§ÑÁêÜÂ∫ïÈÉ®ÂØºËà™ÂàáÊç¢
  const handleViewChange = (view: string) => {
    console.log('DiscoverPage - Â∫ïÈÉ®ÂØºËà™ÁÇπÂáª:', view);
    
    if (view === 'messages') {
      // Ë∑≥ËΩ¨Âà∞Ê∂àÊÅØÈ°µÈù¢
      console.log('DiscoverPage - Ëß¶ÂèënavigateToChat‰∫ã‰ª∂');
      window.dispatchEvent(new CustomEvent('navigateToChat'));
    } else if (view === 'me') {
      // Ë∑≥ËΩ¨Âà∞‰∏™‰∫∫È°µÈù¢
      console.log('DiscoverPage - Ëß¶ÂèënavigateToMe‰∫ã‰ª∂');
      window.dispatchEvent(new CustomEvent('navigateToMe'));
    }
    // 'moments' Â∑≤ÁªèÂú®ÂΩìÂâçÈ°µÈù¢Ôºå‰∏çÈúÄË¶ÅÂ§ÑÁêÜ
  };

  if (isLoading) {
    return (
      <div className="discover-page discover-loading">
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>Âä†ËΩΩ‰∏≠...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="discover-page">
      <div className="discover-content">
        <DiscoverHeader 
          onCompose={() => setShowComposer(true)}
          onSettings={() => setShowSettings(true)}
          postCount={posts.length}
        />
        
        <PostList 
          posts={posts}
          onLike={handleLike}
          onComment={handleComment}
          currentUserId="user"
        />
      </div>

      {/* Â∫ïÈÉ®ÂØºËà™ */}
      <BottomNavigation
        activeView="moments"
        onViewChange={handleViewChange}
        newContentCount={newContentCount}
        forceShow={true}
      />

      {showComposer && (
        <PostComposer
          onPublish={handlePublishPost}
          onCancel={() => setShowComposer(false)}
          userInfo={userInfo}
        />
      )}

      {showSettings && settings && (
        <DiscoverSettingsPanel
          settings={settings}
          onSave={async (newSettings) => {
            await dataManager.saveDiscoverSettings(newSettings);
            setSettings(newSettings);
            setShowSettings(false);
          }}
          onCancel={() => setShowSettings(false)}
        />
      )}


    </div>
  );
} 